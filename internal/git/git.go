package git

import (
	"os"
	"path/filepath"

	"github.com/go-git/go-git/v5"
	gitConfig "github.com/go-git/go-git/v5/config"
	"github.com/go-git/go-git/v5/plumbing/transport/ssh"
	"github.com/soarinferret/ticktask/internal/config"
	"github.com/spf13/viper"
)

var todoFileName = "todo.txt"
var archiveFileName = "archive.txt"

func getSSHPublicKey() (*ssh.PublicKeys, error) {
	return ssh.NewPublicKeysFromFile("git", config.GetSSHPublicKeyPath(), "")
}

func repoPath() string {
	return viper.GetString("task_path")
}

// check if git repository exists
func Exists() bool {
	_, err := os.Stat(filepath.Join(repoPath(), ".git"))
	return !os.IsNotExist(err)
}

func Init() error {
	r, err := git.PlainInit(repoPath(), false)
	if err != nil {
		return err
	}

	// add files
	w, err := r.Worktree()
	if err != nil {
		return err
	}

	// Create and open the files
	todoFile := filepath.Join(repoPath(), todoFileName)
	err = os.WriteFile(todoFile, []byte("# todo.txt - generated by TickTask\n"), 0644)
	if err != nil {
		return err
	}
	archiveFile := filepath.Join(repoPath(), archiveFileName)
	err = os.WriteFile(archiveFile, []byte("# archive.txt - generated by TickTask\n"), 0644)
	if err != nil {
		return err
	}

	_, err = w.Add(".")
	if err != nil {
		return err
	}

	// Commit the current worktree state using the given message
	_, err = w.Commit("Initial commit", &git.CommitOptions{})
	if err != nil {
		return err
	}

	return nil
}

func Clone(url string) error {
	publicKeys, err := getSSHPublicKey()
	if err != nil {
		return err
	}

	_, err = git.PlainClone(repoPath(), false, &git.CloneOptions{
		URL:  url,
		Auth: publicKeys,
	})
	if err != nil {
		return err
	}

	return nil
}

func Pull() error {
	r, err := git.PlainOpen(repoPath())
	if err != nil {
		return err
	}

	w, err := r.Worktree()
	if err != nil {
		return err
	}

	publicKeys, err := getSSHPublicKey()
	if err != nil {
		return err
	}

	err = w.Pull(&git.PullOptions{
		RemoteName: "origin",
		Auth:       publicKeys,
	})
	if err != nil {
		return err
	}

	return nil
}

func Push() error {
	r, err := git.PlainOpen(repoPath())
	if err != nil {
		return err
	}

	publicKeys, err := getSSHPublicKey()
	if err != nil {
		return err
	}

	err = r.Push(&git.PushOptions{
		RemoteName: "origin",
		Auth:       publicKeys,
	})
	if err != nil {
		return err
	}

	return nil
}

func AddRemote(name, url string) error {
	r, err := git.PlainOpen(repoPath())
	if err != nil {
		return err
	}

	_, err = r.CreateRemote(&gitConfig.RemoteConfig{
		Name: name,
		URLs: []string{url},
	})
	if err != nil {
		return err
	}

	return nil
}

func GetRemote() (string, error) {
	r, err := git.PlainOpen(repoPath())
	if err != nil {
		return "", err
	}

	remotes, err := r.Remotes()
	if err != nil {
		return "", err
	}

	if len(remotes) == 0 {
		return "", nil
	}

	return remotes[0].Config().URLs[0], nil
}

func AddToWorkingTree(file string) error {
	r, err := git.PlainOpen(repoPath())
	if err != nil {
		return err
	}

	w, err := r.Worktree()
	if err != nil {
		return err
	}

	_, err = w.Add(file)
	if err != nil {
		return err
	}

	return nil
}

func Commit(message string) error {
	r, err := git.PlainOpen(repoPath())
	if err != nil {
		return err
	}

	w, err := r.Worktree()
	if err != nil {
		return err
	}

	_, err = w.Commit(message, &git.CommitOptions{})
	if err != nil {
		return err
	}

	return nil
}

func CommitTodo() error {
	err := AddToWorkingTree(todoFileName)
	if err != nil {
		return err
	}
	return Commit("Updated todo.txt")
}

func Status() (git.Status, error) {
	r, err := git.PlainOpen(repoPath())
	if err != nil {
		return nil, err
	}

	w, err := r.Worktree()
	if err != nil {
		return nil, err
	}

	status, err := w.Status()
	if err != nil {
		return nil, err
	}

	return status, nil
}
